Claro, aquí te dejo un ejemplo de cómo podrías implementar un CRUD con MongoDB usando Docker:


Primer paso es instalar Docker en tu equipo. Puedes descargarlo desde la página oficial de Docker: https://www.docker.com/products/docker-desktop


A continuación, crea un archivo docker-compose.yml con el siguiente contenido:


yaml
￼Copy code
version: "3.7"

services:
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - ./data:/data/db

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    ports:
      - "8081:8081"
    depends_on:
      - mongodb

Ejecuta el siguiente comando para levantar los contenedores:

bash
￼Copy code
docker-compose up

Ahora puedes acceder a Mongo Express en http://localhost:8081/ para verificar que todo funciona correctamente.


Para conectarte a la base de datos desde tu código Go, usa el siguiente código:


go
￼Copy code
package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func main() {
	// Set client options
	clientOptions := options.Client().ApplyURI("mongodb://root:example@localhost:27017")

	// Connect to MongoDB
	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		log.Fatal(err)
	}

	// Check the connection
	err = client.Ping(context.Background(), nil)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Connected to MongoDB!")

	// Disconnect from MongoDB
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	err = client.Disconnect(ctx)
	if err != nil {
		log.Fatal(err)
	}
}
Este código se conectará a la base de datos de MongoDB que acabamos de crear en el contenedor Docker.

Ahora puedes seguir los siguientes pasos para implementar un CRUD completo:


Crea un modelo de usuario:

go
￼Copy code
package model

import "go.mongodb.org/mongo-driver/bson/primitive"

type User struct {
	ID       primitive.ObjectID `bson:"_id,omitempty"`
	Username string             `bson:"username,omitempty"`
	Password string             `bson:"password,omitempty"`
	Email    string             `bson:"email,omitempty"`
}

Crea una interfaz de repositorio para manejar las operaciones CRUD:

go
￼Copy code
package repository

import (
	"context"

	"github.com/example/model"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

type UserRepository interface {
	Create(ctx context.Context, user *model.User) (*model.User, error)
	Read(ctx context.Context, id primitive.ObjectID) (*model.User, error)
	Update(ctx context.Context, user *model.User) (*model.User, error)
	Delete(ctx context.Context, id primitive.ObjectID) error
}

Implementa la interfaz de repositorio usando la biblioteca oficial MongoDB para Go:

go
￼Copy code
package repository

import (
	"context"

	"github.com/example/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type userRepository struct {
	collection *mongo.Collection
}

func NewUserRepository(db *mongo.Database) UserRepository {
	return &userRepository{
		collection: db.Collection("users"),
	}
}

func (r *userRepository) Create(ctx context.Context, user *model.User) (*model.User, error) {
	result, err := r.collection.InsertOne(ctx, user)
	if err != nil {
		return nil, err
	}

	user.ID = result.InsertedID.(primitive.ObjectID)

	return user, nil
}

func (r *userRepository) Read(ctx context.Context, id primitive.ObjectID) (*model.User, error) {
	user := &model.User{}

	filter := bson.M{"_id": id}

	err := r.collection.FindOne(ctx, filter).Decode(user)
	if err != nil {
		return nil, err
	}

	return user, nil
}

func (r *userRepository) Update(ctx context.Context, user *model.User) (*model.User, error) {
	filter := bson.M{"_id": user.ID}

	update := bson.M{"$set": user}

	opts := options.FindOneAndUpdate().SetReturnDocument(options.After)

	err := r.collection.FindOneAndUpdate(ctx, filter, update, opts).Decode(user)
	if err != nil {
		return nil, err
	}

	return user, nil
}

func (r *userRepository) Delete(ctx context.Context, id primitive.ObjectID) error {
	filter := bson.M{"_id": id}

	_, err := r.collection.DeleteOne(ctx, filter)
	if err != nil {
		return err
	}

	return nil
}

Crea un controlador HTTP para manejar las solicitudes de API:

go
￼Copy code
package handler

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/example/model"
	"github.com/example/repository"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

type UserHandler struct {
	repo repository.UserRepository
}

func NewUserHandler(repo repository.UserRepository) *UserHandler {
	return &UserHandler{
		repo: repo,
	}
}

func (h *UserHandler) Create(w http.ResponseWriter, r *http.Request) {
	user := &model.User{}

	err := json.NewDecoder(r.Body).Decode(user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	user, err = h.repo.Create(r.Context(), user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(user)
}

func (h *UserHandler) Read(w http.ResponseWriter, r *http.Request) {
	id, err := primitive.ObjectIDFromHex(r.URL.Query().Get("id"))
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	user, err := h.repo.Read(r.Context(), id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(user)
}

func (h *UserHandler) Update(w http.ResponseWriter, r *http.Request) {
	user := &model.User{}

	err := json.NewDecoder(r.Body).Decode(user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	user, err = h.repo.Update(r.Context(), user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(user)
}

func (h *UserHandler) Delete(w http.ResponseWriter, r *http.Request) {
	id, err := primitive.ObjectIDFromHex(r.URL.Query().Get("id"))
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	err = h.repo.Delete(r.Context(), id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}

Finalmente, configura las rutas y los controladores en el archivo 
main.go
:

go
￼Copy code
package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"github.com/example/handler"
	"github.com/example/repository"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func main() {
	// Set client options
	clientOptions := options.Client().ApplyURI("mongodb://root:example@localhost:27017")

	// Connect to MongoDB
	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		log.Fatal(err)
	}

	// Check the connection
	err = client.Ping(context.Background(), nil)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Connected to MongoDB!")

	// Initialize repositories
	userRepo := repository.NewUserRepository(client.Database("example"))

	// Initialize handlers
	userHandler := handler.NewUserHandler(userRepo)

	// Initialize routes
	router := http.NewServeMux()

	router.HandleFunc("/api/user/create", userHandler.Create)
	router.HandleFunc("/api/user/read", userHandler.Read)
	router.HandleFunc("/api/user/update", userHandler.Update)
	router.HandleFunc("/api/user/delete", userHandler.Delete)

	// Start the server
	fmt.Println("Server listening at http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", router))
}
¡Listo! Ahora tienes un servidor web Go que utiliza MongoDB como base de datos y que puede manejar operaciones CRUD para usuarios.

￼
￼
como inicio la base de datos mongodb con docker

￼
Para iniciar una base de datos MongoDB con Docker, primero debe asegurarse de tener Docker instalado en su máquina. Luego, puede ejecutar el siguiente comando en la terminal:

￼Copy code
docker run --name mongodb -p 27017:27017 -d mongo
Este comando descargará la imagen de MongoDB desde Docker Hub y la ejecutará en un contenedor con el nombre "mongodb". El parámetro "-p" expone el puerto 27017 de la base de datos dentro del contenedor al puerto 27017 de su máquina local, lo que le permite conectarse a la base de datos desde su aplicación. Después de ejecutar este comando, puede verificar que el contenedor se esté ejecutando correctamente con el comando docker ps.